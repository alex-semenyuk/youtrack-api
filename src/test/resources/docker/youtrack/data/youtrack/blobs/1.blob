G/*
 Copyright 2017 JetBrains s.r.o.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/**
 * Module containing stuff related to HTTP routine. The main class is Connection.
 *
 * @module @jetbrains/youtrack-scripting-api/http
 */

var oah = Packages.org.apache.http;
var sandbox = Packages.jetbrains.youtrack.scripts.sandbox;

var getAuthHeader = function (login, password) {
  return {name: 'Authorization', value: 'Basic ' + sandbox.Base64.encode(login + ':' + password)};
};

var getAbsoluteUrl = function (url, uri) {
  if (!url) {
    return uri;
  }
  if (url.lastIndexOf('/') !== url.length - 1 && uri && uri.indexOf('/') !== 0) {
    url = url + '/';
  }
  return uri ? url + uri : url;
};

/**
 * @typedef REQUEST_TYPES
 *
 * @classdesc Set of supported request types. Note that instead of passing one
 * of these to {@link Connection}.doSync, you can call a corresponding method
 * directly (e.g. getSync, postSync etc).
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods}
 *
 * @type {object}
 */
var REQUEST_TYPES = {
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for requesting data from the target resource.
   */
  GET: 'GET',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Same as GET, but response contains only headers and no data.
   */
  HEAD: 'HEAD',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for submitting data to the target resource.
   */
  POST: 'POST',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for replacing all current representations of the target resource.
   */
  PUT: 'PUT',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for applying partial modifications to the target resource.
   */
  PATCH: 'PATCH',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for deleting the target resource.
   */
  DELETE: 'DELETE',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for establishing a tunnel to the server identified by the target resource.
   */
  CONNECT: 'CONNECT',
  /**
   * @type {string}
   * @memberOf REQUEST_TYPES
   * @readonly
   * @description Used for describing the communication options for the target resource.
   */
  OPTIONS: 'OPTIONS'
};

ResponseWrapper = function (response) {
  this.response = response;
};
ResponseWrapper.prototype.getResponseAsString = function () {
  var responseEntity = this.response.getEntity();
  return sandbox.Utils.readString(responseEntity.getContent(),
    responseEntity.getContentEncoding() ? responseEntity.getContentEncoding().getValue() : 'UTF-8');
};
ResponseWrapper.prototype.getResponseAsStream = function () {
  return this.response.getEntity().getContent();
};
ResponseWrapper.prototype.getHeaders = function () {
  return this.response.getAllHeaders();
};
ResponseWrapper.prototype.getStatusCode = function () {
  return this.response.getStatusLine() && this.response.getStatusLine().getStatusCode();
};

/**
 * @typedef {Object} Connection
 *
 * @classdesc Main class which is used for establishing a connection and making requests to target sites.
 *
 * @property {string} [url] url of target site to connect. Can be empty, as a uri is passed to request methods.
 * @property {Array<{name: String, value: String}>} [headers] list of headers.
 *
 * @example
 * // Get a content of a PasteBin paste, assuming that we have somehow received its key (`pasteBinKey`).
 * var connection = new http.Connection('http://pastebin.com/raw/');
 * connection.addHeader({name: ‘Content-Type’, value: ‘text/plain’});
 * var response = connection.getSync(pasteBinKey, '');
 * if (response && response.code === 200) {
 *   var text = '';
 *   response.headers.forEach(function(header) {
 *     text += header.name + ': ' + header.value + '\n';
 *   });
 *   text += '\n' + response.response;
 *   issue.addComment(text);
 * }
 */

/**
 * Initiate a new connection.
 * @param {string} [url] url of target site to connect. Can be empty, as a uri is passed to request methods.
 * @param {string} [sslKeyName] optional name of ssl key, which is required for connection.
 * @param {int} [timeout] optional parameter to specify read timeout for outgoing http requests
 * @constructor Connection
 *
 * @see doSync
 */
Connection = function (url, sslKeyName, timeout) {
  this.url = url;
  this.httpClient = new sandbox.ClientFactory.getHttpClient(sslKeyName, timeout ? timeout : 0);
  this.headers = [];
};

/**
 * Add a new header to a current connection.
 * @param {Object|string} header header object with the following structure: {name: string, value: string} or a string in case the second parameter is also used.
 * @param {string} [value] header value. Only considered when the first argument is a string.
 * @returns {Connection} this connection instance
 */
Connection.prototype.addHeader = function (header, value) {
  if (typeof header === 'string') {
    header = {name: header, value: value};
  }
  this.headers.push(header);
  return this;
};

/**
 * Adds an Authorization header with value Base64.encode(login + ':' + password).
 * @param {String} login login to use.
 * @param {String} password password to use.
 * @returns {Connection} this connection instance.
 */
Connection.prototype.basicAuth = function (login, password) {
  this.addHeader(getAuthHeader(login, password));
  return this;
};

/**
 * @private WARNING! do not use this function, it's NOT considered a part of a public API and will be removed in the future.
 */
Object.defineProperty(Connection.prototype, 'request', {enumerable: false, writable: false, value: function (requestType, uri, queryParams, payload, success, failure) {
  if (!REQUEST_TYPES.hasOwnProperty(requestType.toUpperCase())) {
    throw 'Request type \'' + requestType + '\' is not allowed. Allowed types are ' + Object.keys(REQUEST_TYPES).join(', ') + ' (case insensitive)';
  }
  if (queryParams && !Array.isArray(queryParams) && (typeof queryParams !== 'object')) {
    throw 'queryParams should be an array of objects {name: \'paramName\', value: \'paramValue\'} or an object. In the later case keys are treated as parameters names';
  }
  if (queryParams && !Array.isArray(queryParams) && (typeof queryParams === 'object')) {
    var qp = [];
    Object.keys(queryParams).forEach(function (key) {
      var value = queryParams[key];
      if (typeof value === 'string') {
        qp.push({name: key, value: value});
      } else if (!Array.isArray(value)) {
        value.forEach(function (singleValue) {
          qp.push({name: key, value: singleValue});
        })
      } else {
        throw 'Can not correctly handle ' + key + 'query parameter. It should be either a string for a single value, or an array for multiple values';
      }
    });
    queryParams = qp;
  }
  queryParams = queryParams || [];
  console.trace('Initiated a connection. Base url: ' + this.url + ', uri: ' + uri);

  var url = this.url;
  var processResponse = function (response, exc, chain) { // chain of responsibilities
    if (exc || !response || !response.getStatusCode() || response.getStatusCode() < 200 || response.getStatusCode() >= 400) {
      console.debug(' Connection failed ' + url + ', uri: ' + uri +
        (response ? '. Resp. status code : ' + response.getStatusCode() : ''));
      chain.failure(response, exc);
    } else {
      console.trace(' Connection succeeded ' + url + ', uri: ' + uri);
      chain.success(response);
    }
  };
  var exc = null;
  var response;
  var request;
  try {
    var name = requestType.toLowerCase();
    var requestBulder = oah.client.methods.RequestBuilder[name](getAbsoluteUrl(this.url, uri));
    queryParams.forEach(function (p) {
      requestBulder.addParameter(p.name, p.value);
    });
    this.headers.forEach(function (elem) {
      requestBulder.addHeader(elem.name, elem.value);
    });
    if (payload) {
      if (typeof payload === 'string') {
        requestBulder.setEntity(new oah.entity.StringEntity(payload, 'UTF-8'));
      } else if (Array.isArray(payload)) {
        var pairs = payload.map(function (entry) {
          return new oah.message.BasicNameValuePair(entry.name, entry.value);
        });
        requestBulder.setEntity(new oah.client.entity.UrlEncodedFormEntity(pairs, 'UTF-8'));
      } else {
        requestBulder.setEntity(new oah.entity.StringEntity(JSON.stringify(payload), 'UTF-8'));
      }
    }
    request = requestBulder.build();
    response = this.httpClient.execute(request);
  } catch (e) {
    exc = e;
  }
  var responseWrapper = response ? new ResponseWrapper(response) : null;
  var chain = {
    'success': success,
    'failure': failure,
    'process': processResponse
  };
  try {
    processResponse(responseWrapper, exc, chain);
  } finally {
    if (request) {
      request.releaseConnection();
    }
  }
}});

/**
 * @typedef {Object} Response
 *
 * @classdesc Object containing HTTP response properties.
 *
 * @property {string} [response] response body. Can be null in case an exception occurs during processing.
 *
 * @property {Object} [responseAsStream] byte stream representation of response body. Can be null in case an exception occurs during processing.
 *
 * @property {Array<{name: String, value: String}>} [headers] response headers. Can be null in case an exception occurs during processing.
 *
 * @property {number} [code] response code. Can be null in case an exception occurs during processing.
 *
 * @property {Object} [exception] an exception that occurred during processing.
 *
 * @property {boolean} [isSuccess] `true` in case response status is in interval from 200 (inclusive) to 400 (exclusive).
 *
 * @example
 * // Get a content of a PasteBin paste, assuming that we have somehow received its key (`pasteBinKey`).
 * var connection = new http.Connection('http://pastebin.com/raw/');
 * connection.addHeader({name: ‘Content-Type’, value: ‘text/plain’});
 * var response = connection.getSync(pasteBinKey, '');
 * if (response && response.code === 200) {
 *   var text = '';
 *   response.headers.forEach(function(header) {
 *     text += header.name + ': ' + header.value + '\n';
 *   });
 *   text += '\n' + response.response;
 *   issue.addComment(text);
 * }
 */

/**
 * Sends a synchronous HTTP request. Note that instead of passing a proper request type
 * you can call a corresponding method, like `getSync(uri, queryParams)` etc.
 *
 * @param {string} requestType a valid HTTP request type. {@link REQUEST_TYPES} can be located in an appropriate constant.
 *
 * @param {string} [uri] relative URI. A complete URL is a concatenation of a string passed to Connection constructor and this string.
 *
 * @param {Array<{name: String, value: String}>} [queryParams] query parameters.
 *
 * @param {string|Array|Object} [payload] a payload to be sent.
 *
 * @return {Response} an object representing an HTTP response.
 */
Connection.prototype.doSync = function (requestType, uri, queryParams, payload) {
  var response = null;
  var responseString = null;
  var responseStream = null;
  var headers = null;
  var e = null;
  var encoding = null;
  var code = null;

  uri = uri || '';

  var receiver = function (resp, exc) {
    response = resp;
    encoding = response && response.response && response.response.getEntity() && response.response.getEntity().getContentEncoding() || 'UTF-8';
    responseStream = response && sandbox.IOUtils.bufferStream(response.getResponseAsStream());
    headers = response && response.getHeaders().map(function (apacheHeader) {
      return {name: apacheHeader.getName(), value: apacheHeader.getValue()};
    });
    code = response && response.getStatusCode();
    e = exc;
  };

  this.request(requestType, uri, queryParams, payload, receiver, receiver);
  return Object.defineProperties({}, {
    response: {
      get: function () {
        return response && (responseString || (responseString = sandbox.Utils.readString(responseStream, encoding)));
      },
      enumerable: true
    },
    responseAsStream: {
      value: responseStream,
      enumerable: true
    },
    headers: {
      value: headers,
      enumerable: true
    },
    code: {
      value: code,
      enumerable: true
    },
    exception: {
      value: e,
      enumerable: true
    },
    isSuccess: {
      get: function () {
        return !this.exception && this.code >= 200 && this.code < 400;
      },
      enumerable: true
    },
    toString: {
      value: function () {
        if (this.exception) {
          return 'Failed to execute the request. Exception is\n' + this.exception;
        }
        var codeString = 'Response code: ' + this.code + '\n';
        var headersString = headers ? 'Response headers:\n' : '';
        headers && headers.forEach(function (header) {
          headersString += header.name + ': ' + header.value + '\n';
        });
        return codeString + headersString + 'Response body:\n' + this.response;
      },
      enumerable: true
    }
  });
};

/**
 * Executes synchronous GET request.
 *
 * @param {String} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.getSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.GET, uri, queryParams);
};


/**
 * Executes synchronous HEAD request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.headSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.HEAD, uri, queryParams);
};

/**
 * Executes synchronous POST request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names. In case the payload parameter is empty, query parameters are passed as a form entity.
 *
 * @param {string} [payload] request payload.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.postSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.POST, uri, queryParams, payload);
};

/**
 * Executes synchronous PUT request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names. In case the payload parameter is empty, query parameters are passed as a form entity.
 *
 * @param {string} [payload] request payload.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.putSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.PUT, uri, queryParams, payload);
};

/**
 * Executes synchronous PATCH request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @param {string} [payload] request payload.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.patchSync = function (uri, queryParams, payload) {
  return this.doSync(REQUEST_TYPES.PATCH, uri, queryParams, payload);
};

/**
 * Executes synchronous DELETE request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.deleteSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.DELETE, uri, queryParams);
};

/**
 * Executes synchronous CONNECT request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.connectSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.CONNECT, uri, queryParams);
};

/**
 * Executes synchronous OPTIONS request.
 *
 * @param {string} [uri] request URI.
 *
 * @param {Array<{name: String, value: String}>|Object} [queryParams] query parameters. In case an object is passed,
 * its keys are considered to be parameter names.
 *
 * @return {Response} an object representing an HTTP response.
 *
 * @see doSync for parameters and return value descriptions.
 */
Connection.prototype.optionsSync = function (uri, queryParams) {
  return this.doSync(REQUEST_TYPES.OPTIONS, uri, queryParams);
};

exports.Connection = Connection;
exports.REQUEST_TYPES = REQUEST_TYPES;
